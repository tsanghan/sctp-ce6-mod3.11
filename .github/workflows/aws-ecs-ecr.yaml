name: Deploy to Amazon ECS

on:
  push:
    branches: [ "dev", "uat" ]
  workflow_dispatch:

## Moved to GitHub Action Environment "dev"
# env:
#   AWS_REGION: ap-southeast-1
#   ECR_REPOSITORY: tsanghan-ce6/hello-app
#   ECS_SERVICE: tsanghan-ce6-service
#   ECS_CLUSTER: tsanghan-ce6-ecs-cluster
#   CONTAINER_NAME: tsanghan-ce6-container
#   REGISTRY_ALIAS: u2q1a2y8

permissions:
  contents: read

jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event"
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

  install-dependencies:
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run installation of dependencies commands
        run: |
          cd app/node
          npm install

  npm-audit:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run Scanning of Dependencies Commands
        run: |
          cd app/node
          npm audit

  code-unit-testing:
    runs-on: ubuntu-latest
    needs: npm-audit
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Run installation of dependencies commands
        run: |
          cd app/node
          npm install
      - name: Run unit testing command
        run: |
          cd app/node
          npm test

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: code-unit-testing
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v2
      with:
        registry-type: public
      env:
        AWS_REGION: us-east-1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        AWS_REGION: us-east-1
        REGISTRY_ALIAS: ${{ vars.REGISTRY_ALIAS }}
        ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      run: |
        cd app/node
        docker build -t $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG .
        # aws ecr-public create-repository --repository-name tsanghan-ce6/hello-app --region us-east-1
        docker push $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "sha256=$(docker inspect --format='{{index .RepoDigests 0}}' $ECR_REGISTRY/$REGISTRY_ALIAS/$ECR_REPOSITORY:$IMAGE_TAG)" >> $GITHUB_OUTPUT

    - uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.6.0

    - name: Tofu Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd ecs-service-task
        tofu init

      # Checks that all Terraform configuration files adhere to a canonical format
    - name: Tofu Format
      run: |
        cd ecs-service-task
        tofu fmt -check -resursive

    # Validate that all Terraform configuration files
    - name: Tofu Validate
      run: |
        cd ecs-service-task
        tofu validate

    # Generates an execution plan for Terraform
    - name: Tofu Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_container_image: ${{ steps.build-image.outputs.sha256 }}
      run: |
        cd ecs-service-task
        tofu plan

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Tofu Apply
      # if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_container_image: ${{ steps.build-image.outputs.sha256 }}
      run: |
        cd ecs-service-task
        tofu apply -auto-approve

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true